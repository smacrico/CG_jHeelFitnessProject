"""
HRV Data Processor and Analyzer v1.0 (Development Version)
Processes heart rate variance data from FIT files using fbbbrown's Heart Monitor + HRV app format.
**** curently only processes HRV data from FIT files generated by the Meditate app ****
""" ## v2.0 0 - Calculats also Recovery Score for each activity

import logging
import os
import sqlite3
from datetime import datetime
import pandas as pd
import numpy as np
from fitparse import FitFile

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class HRVProcessor:
    """Main class for processing and analyzing HRV data"""
    
    _application_id = bytearray(b'\x0b\xdc\x0eu\x9b\xaaAz\x8c\x9f\xe9vf*].')

    def __init__(self, db_path='e:/jheel_dev/DataBasesDev/artemis_hrv.db'):
        self.db_path = db_path
        self._init_database()

    def _init_database(self):
        """Initialize database tables and views"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # Create HRV Records table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hrv_recordsDEV1 (
                activity_id TEXT,
                record INTEGER,
                timestamp DATETIME,
                hrv_s INTEGER,
                hrv_btb INTEGER,
                hrv_hr INTEGER,
                stress_hrp INTEGER,
                PRIMARY KEY (activity_id, record)
            )
        """)

        # Create HRV Sessions table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hrv_sessionsDEV1 (
                activity_id TEXT PRIMARY KEY,
                timestamp DATETIME,
                min_hr INTEGER,
                hrv_rmssd INTEGER,
                hrv_sdrr_f INTEGER,
                hrv_sdrr_l INTEGER,
                hrv_pnn50 INTEGER,
                hrv_pnn20 INTEGER,
                stress_hrpa INTEGER
            )
        """)

        # Create views
        cursor.execute("""
            CREATE VIEW IF NOT EXISTS daily_hrv_summaryDEV1 AS
            SELECT 
                DATE(timestamp) as date,
                AVG(hrv_rmssd) as avg_rmssd,
                AVG(hrv_sdrr_f) as avg_sdrr_f,
                AVG(hrv_sdrr_l) as avg_sdrr_l,
                AVG(hrv_pnn50) as avg_pnn50,
                AVG(hrv_pnn20) as avg_pnn20,
                AVG(stress_hrpa) as avg_stress_hrpa,
                MIN(min_hr) as lowest_hr
            FROM hrv_sessionsDEV1
            GROUP BY DATE(timestamp)
        """)

        cursor.execute("""
            CREATE VIEW IF NOT EXISTS detailed_hrv_analysisDEV1 AS
            SELECT 
                r.activity_id,
                r.timestamp,
                r.hrv_btb,
                r.hrv_hr,
                s.hrv_rmssd,
                s.hrv_sdrr_f,
                s.hrv_sdrr_l
            FROM hrv_recordsDEV1 r
            JOIN hrv_sessionsDEV1 s ON r.activity_id = s.activity_id
        """)

        conn.commit()
        conn.close()

    def write_record_entry(self, conn, fit_file, activity_id, message_fields, record_num):
        """Write a record message into the records DEV1 table"""
        try:
            cursor = conn.cursor()
            
            # Check if record exists
            cursor.execute("""
                SELECT 1 FROM hrv_recordsDEV1 
                WHERE activity_id = ? AND record = ?
            """, (activity_id, record_num))
            
            if not cursor.fetchone():
                record = (
                    activity_id,
                    record_num,
                    # fit_file.utc_datetime_to_local(message_fields.timestamp),
                    message_fields.get('timestamp'),
                    message_fields.get('hrv_s'),
                    message_fields.get('hrv_btb'),
                    message_fields.get('hrv_hr'),
                    message_fields.get('stress_hrp')
                )
                
                cursor.execute("""
                    INSERT INTO hrv_recordsDEV1 
                    (activity_id, record, timestamp, hrv_s, hrv_btb, hrv_hr, stress_hrp)
                    VALUES (?, ?, ?, ?, ?, ?,?)
                """, record)
                
                logger.debug(f"Writing HRV record for {activity_id}, record {record_num}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error writing record entry: {e}")
            return False

    def write_session_entry(self, conn, fit_file, activity_id, message_fields):
        """Write a session message into the sessions table"""
        try:
            cursor = conn.cursor()
            
            # Check if session exists
            cursor.execute("""
                SELECT 1 FROM hrv_sessionsDEV1 
                WHERE activity_id = ?
            """, (activity_id,))
            
            if not cursor.fetchone():
                session = (
                    activity_id,
                    # fit_file.utc_datetime_to_local(message_fields.timestamp),
                    message_fields.get('timestamp'),
                    message_fields.get('min_hr'),
                    message_fields.get('hrv_rmssd'),
                    message_fields.get('hrv_sdrr_f'),
                    message_fields.get('hrv_sdrr_l'),
                    message_fields.get('hrv_pnn50'),
                    message_fields.get('hrv_pnn20'),
                    message_fields.get('stress_hrpa')   
                )
                
                cursor.execute("""
                    INSERT INTO hrv_sessionsDEV1 
                    (activity_id, timestamp, min_hr, hrv_rmssd, hrv_sdrr_f, 
                     hrv_sdrr_l, hrv_pnn50, hrv_pnn20, stress_hrpa)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, session)
                
                logger.debug(f"Writing HRV session for {activity_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error writing session entry: {e}")
            return False

    def process_fit_file(self, fit_file_path):
        """Process a single FIT file"""
        try:
            fit_file = FitFile(fit_file_path)
            
            # Check if this is an HRV activity by looking for field 110
            messages = list(fit_file.messages)
            is_hrv_activity = True
            for message in messages:
                if message.name == 'file_id':
                    fields_dict = {field.name: field.value for field in message.fields}
                    app_name = fields_dict.get('field 110')  # or field number 110
                    if app_name == "F3b Monitor+HRV":
                        is_hrv_activity = True
                    break
                    
            if not is_hrv_activity:
                logger.info(f"Skipping {fit_file_path} - not an HRV activity")
                return False

            conn = sqlite3.connect(self.db_path)
            try:
                record_num = 0
                activity_id = os.path.basename(fit_file_path)
                
                for message in messages:
                    if message.name == 'record':
                        fields_dict = {field.name: field.value for field in message.fields}
                        self.write_record_entry(conn, fit_file, activity_id, fields_dict, record_num)
                        record_num += 1
                    elif message.name == 'session':
                        fields_dict = {field.name: field.value for field in message.fields}
                        self.write_session_entry(conn, fit_file, activity_id, fields_dict)
                
                conn.commit()
                logger.info(f"Successfully processed {fit_file_path}")
                return True
                
            except Exception as e:
                logger.error(f"Error processing file {fit_file_path}: {e}")
                return False
                
            finally:
                conn.close()

        except Exception as e:
            logger.error(f"Error opening file {fit_file_path}: {e}")
            return False

    def analyze_hrv_trends(self, days=30):
        """Analyze HRV trends over specified number of days"""
        conn = sqlite3.connect(self.db_path)
        query = """
            SELECT 
                date,
                avg_rmssd,
                avg_sdrr_f,
                avg_sdrr_l,
                avg_pnn50,
                avg_pnn20,
                avg_stress_hrpa
            FROM daily_hrv_summaryDEV1
            ORDER BY date DESC
            LIMIT ?
        """
        
        df = pd.read_sql_query(query, conn, params=(days,))
        conn.close()
        
        if df.empty:
            return None
            
        stats = {
            'rmssd_mean': df['avg_rmssd'].mean(),
            'rmssd_std': df['avg_rmssd'].std(),
            'sdrr_f_mean': df['avg_sdrr_f'].mean(),
            'sdrr_l_mean': df['avg_sdrr_l'].mean(),
            'pnn50_mean': df['avg_pnn50'].mean(),
            'pnn20_mean': df['avg_pnn20'].mean(),
            'stress_hrpa_mean': df['avg_stress_hrpa'].mean()
        }
        
        # Calculate trends
        stats['rmssd_trend'] = np.polyfit(range(len(df)), df['avg_rmssd'], 1)[0]
        
        return stats

    def calculate_recovery_score(self, activity_id):
        """Calculate recovery score based on HRV metrics"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT 
                hrv_rmssd,
                hrv_sdrr_l,
                hrv_pnn50,
                stress_hrpa,
                min_hr
            FROM hrv_sessionsDEV1
            WHERE activity_id = ?
        """, (activity_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0] is not None and result[1] is not None and result[2] is not None:
            try:
                rmssd_score = min(100, float(result[0]) / 2)
                sdrr_score = min(100, float(result[1]) / 2)
                pnn50_score = float(result[2])
                
                recovery_score = (rmssd_score + sdrr_score + pnn50_score) / 3
                return round(recovery_score, 2)
            except (TypeError, ValueError) as e:
                logger.error(f"Error calculating recovery score for activity {activity_id}: {e}")
                return None
        return None


def process_activities_folder(folder_path):
    """Process all FIT files in the specified folder"""
    processor = HRVProcessor()
    
    if not os.path.exists(folder_path):
        logger.error(f"Folder {folder_path} does not exist")
        return
    
    for filename in os.listdir(folder_path):
        if filename.lower().endswith('.fit'):
            file_path = os.path.join(folder_path, filename)
            logger.info(f"Processing {file_path}")
            processor.process_fit_file(file_path)
    
    return processor

def main():
    # Process activities from the test folder
    processor = process_activities_folder('c:/users/stma/healthdata/fitfiles/activities')
    # processor = process_activities_folder('c:/users/stma/healthdata/fitfiles/activities2025')
    
    if processor:
        # Connect to database to get activity IDs
        conn = sqlite3.connect(processor.db_path)
        cursor = conn.cursor()
        
        # Get all activity IDs
        cursor.execute("SELECT activity_id FROM hrv_sessionsDEV1")
        activities = cursor.fetchall()
        conn.close()
        
        # Print recovery scores for each activity
        print("\nRecovery Scores:")
        for activity in activities:
            activity_id = activity[0]
            recovery_score = processor.calculate_recovery_score(activity_id)
            if recovery_score is not None:
                print(f"Activity {activity_id}: Recovery Score = {recovery_score}")
            else:
                print(f"Activity {activity_id}: Unable to calculate recovery score (insufficient data)")
        
        # Existing trend analysis
        print("\nAnalyzing HRV trends for the last 30 days:")
        trends = processor.analyze_hrv_trends()
        if trends:
            for metric, value in trends.items():
                print(f"{metric}: {value:.2f}")
        else:
            print("No HRV data available for analysis")

if __name__ == "__main__":
    main()